import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Locale;

/**
 * <h1>Drone</h1> Represents a Drone
 */

public class Drone extends Vehicle {

    private String licensePlate;
    private double maxWeight;
    private double currentWeight;
    private int zipDest;
    private ArrayList <Package> packages = new ArrayList<Package>();
    final private double GAS_RATE = 1.33;
    private int maxRange;

    /**
     * Default Contructor 
     */

    public Drone () {
        super ();
    }

    /**
     * Constructor
     * 
     * @param licensePlate license plate of vehicle
     * @param maxWeight    maximum weight that the vehicle can hold
     */

    public Drone (String licensePlate, double maxWeight) {
       super (licensePlate, maxWeight);
       this.currentWeight = 0;
    }

    public String getLicensePlate() {
        return this.licensePlate;
    }

    public void setLicensePlate(String licensePlate) {
        this.licensePlate = licensePlate;
    }

    public double getMaxWeight() {
        return this.maxWeight;
    }

    public void setMaxWeight(double maxWeight) {
        this.maxWeight = maxWeight;
    }

    public double getCurrentWeight() {
        return this.currentWeight;
    }

    public int getZipDest() {
        return this.zipDest;
    }

    public void setZipDest(int zipDest) {
        this.zipDest = zipDest;
    }

//   // public ArrayList <Package> getPackages() {
//        return this.packages;
//    }

    public boolean addPackage(Package pkg) {
        if (this.currentWeight <= this.maxWeight) {
            packages.add(pkg);
            this.currentWeight = this.currentWeight + pkg.getWeight(); //add weight of pkg to current weight
            return true;
        }
        return false;
    }


    public boolean isFull() {
        if (this.currentWeight >= this.maxWeight) { //equal to because if it's the max weight, you can't put more pkg
            return true;
        }
        return false;
    }

    public void fill(ArrayList<Package> warehousePackages) {
        int range = 0;
        while (!isFull() && warehousePackages.size() != 0) {
            for (int i = 0; i <warehousePackages.size(); i++) {
                int difference = Math.abs(this.zipDest - warehousePackages.get(i).getDestination().getZipCode());

                if (((difference == range))) {
                    addPackage(warehousePackages.get(i));
                    warehousePackages.remove(i);
                    maxRange = range;
                    i = i - 1;
                }

            }

            range = range + 1; //since it's in an arraylist, you need to do this because the size decreases

        }
    }

    public int getMaxRange() {
        return this.maxRange;
    }

    /**
     * Returns the profits generated by the packages currently in the Truck.
     * <p>
     * &sum;p<sub>price</sub> - (range<sub>max</sub> &times; 1.33)
     * </p>
     */

    NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.US);


    @Override
    public double getProfit() {
    	double profit = 0.0;
    	double priceOfPackage = 0.0;

        for (int i = 0; i <packages.size() ; i++) {
            priceOfPackage = packages.get(i).getPrice();
            profit = (profit + ((priceOfPackage)- (getMaxRange() * GAS_RATE)));
        }
    	return profit;
    }

    /**
     * Generates a String of the Drone report. Drone report includes:
     * <ul>
     * <li>License Plate No.</li>
     * <li>Destination</li>
     * <li>Current Weight/Maximum Weight</li>
     * <li>Net Profit</li>
     * <li>Shipping labels of all packages in truck</li>
     * </ul>
     * 
     * @return Truck Report
     */
    @Override
    public String report() {
        String endResult = "";


        /////drone report

        String drone = "==========Drone Report==========";
        String license = "License Plate No.: " + super.getLicensePlate();
        String destination = "Destination: " + getZipDest();
        String weightLoad = String.format("Weight load: %.2f" + "/%.2f", getCurrentWeight(), super.getMaxWeight());
        String netProfit = "Net Profit: " + nf.format(getProfit());
        String shippingLabels = "=====Shipping Labels=====";
        String dash = "====================";


        ///////shipping labels

        for (int i = 0; i <packages.size(); i++) {
            endResult += "\n" + packages.get(i).shippingLabel();
        }

        return drone + "\n" + license + "\n" + destination + "\n" + weightLoad + "\n" + netProfit
                + "\n" + shippingLabels + endResult;
    }
    
   

}
